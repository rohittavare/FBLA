<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player_standing_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
//walking speed
spd_walk = 2;
//running speed
spd_run = 4;
//tired speed
spd_tired = 1;
//direction
direct = 3;
//attacking animation playing
attacking = false;
//attack counter placed
attacked = false;
//playable
playable = false;

alarm[1] = room_speed * 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///go to next level
obj_player_stats.level++;
with (obj_player_stats) room_goto(door);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start playing
playable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop attacking
attacking = false;
attacked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//check keyboard inputs
if(playable) {
    var right_key = keyboard_check(vk_right);
    var left_key = keyboard_check(vk_left);
    var up_key = keyboard_check(vk_up);
    var down_key = keyboard_check(vk_down);
    var Z = keyboard_check_pressed(ord('Z'));
    var X = keyboard_check(ord('X'));
    
    var vspd = 0;
    var hspd = 0;
    
    //character movement
    if(!attacking) {
        if(X) {
            if(obj_player_stats.stamina &gt; 0) {
                if(up_key &amp;&amp; !down_key) {
                    vspd -= obj_player_stats.spd_run;
                    direct = 1;
                    sprite_index = sp_player_running_up;
                    image_speed = 0.083;
                } else if (down_key &amp;&amp; !up_key) {
                    vspd += obj_player_stats.spd_run;
                    direct = 3;
                    sprite_index = sp_player_running_down;
                    image_speed = 0.083;
                }
                if(left_key &amp;&amp; !right_key) {
                    hspd -= obj_player_stats.spd_run;
                    direct = 2;
                    sprite_index = sp_player_running_left;
                    image_speed = 0.083;
                } else if (right_key &amp;&amp; !left_key) {
                    hspd += obj_player_stats.spd_run;
                    direct = 0;
                    sprite_index = sp_player_running_right;
                    image_speed = 0.083;
                }
                if(hspd != 0 || vspd != 0) {
                    obj_player_stats.stamina -= .25;
                } else {
                    if(direct == 0) {
                        sprite_index = sp_player_standing_right;
                    } else if(direct == 1) {
                        sprite_index = sp_player_standing_up;
                    } else if(direct == 2) {
                        sprite_index = sp_player_standing_left;
                    } else if(direct == 3) {
                        sprite_index = sp_player_standing_down;
                    }
                }
            } else {
                if(up_key &amp;&amp; !down_key) {
                    vspd -= obj_player_stats.spd_tired;
                    direct = 1;
                    sprite_index = sp_player_running_up;
                    image_speed = 0.033;
                } else if (down_key &amp;&amp; !up_key) {
                    vspd += obj_player_stats.spd_tired;
                    direct = 3;
                    sprite_index = sp_player_running_down;
                    image_speed = 0.033;
                }
                if(left_key &amp;&amp; !right_key) {
                    hspd -= obj_player_stats.spd_tired;
                    direct = 2;
                    sprite_index = sp_player_running_left;
                    image_speed = 0.033;
                } else if (right_key &amp;&amp; !left_key) {
                    hspd += obj_player_stats.spd_tired;
                    direct = 0;
                    sprite_index = sp_player_running_right;
                    image_speed = 0.033;
                }
                
            }
            
        } else {
            if(obj_player_stats.stamina &lt; 60) {
                obj_player_stats.stamina += .02;
            }
            if(up_key &amp;&amp; !down_key) {
                vspd -= obj_player_stats.spd_walk;
                direct = 1;
                sprite_index = sp_player_walking_up;
                image_speed = 0.083;
            } else if (down_key &amp;&amp; !up_key) {
                vspd += obj_player_stats.spd_walk;
                direct = 3;
                sprite_index = sp_player_walking_down;
                image_speed = 0.083;
            }
            if(left_key &amp;&amp; !right_key) {
                hspd -= obj_player_stats.spd_walk;
                direct = 2;
                sprite_index = sp_player_walking_left;
                image_speed = 0.083;
            } else if (right_key &amp;&amp; !left_key) {
                hspd += obj_player_stats.spd_walk;
                direct = 0;
                sprite_index = sp_player_walking_right;
                image_speed = 0.083;
            }
            
            
        }
        if(hspd == 0 &amp;&amp; vspd == 0) {
            if(direct == 0 &amp;&amp; sprite_index != sp_player_standing_right) {
                sprite_index = sp_player_standing_right;
            } else if(direct == 1 &amp;&amp; sprite_index != sp_player_standing_up) {
                sprite_index = sp_player_standing_up;
            } else if(direct == 2 &amp;&amp; sprite_index != sp_player_standing_left) {
                sprite_index = sp_player_standing_left;
            } else if(direct == 3 &amp;&amp; sprite_index != sp_player_standing_down) {
                sprite_index = sp_player_standing_down;
            }
        }
    }
    
    move(hspd, vspd);
    
    damage_counter = instance_place(x, y, obj_player_damage);
    if(damage_counter != noone) {
        if(abs(damage_counter.x - x) &lt; 40 &amp;&amp; abs(damage_counter.y - y) &lt; 40) {
            obj_player_stats.player_health -= damage_counter.damage;
            with (damage_counter) instance_destroy();
        }
    }
    
    health_counter = instance_place(x, y, obj_health_pack);
    if(health_counter != noone) {
        if(abs(health_counter.x - x) &lt; 40 &amp;&amp; abs(health_counter.y - y) &lt; 40) {
            obj_player_stats.player_health += health_counter.health_val;
            if(obj_player_stats.player_health &gt; obj_player_stats.max_health) {
                obj_player_stats.player_health = obj_player_stats.max_health;
            }
            with (health_counter) instance_destroy();
        }
    }
    
    coin_item = instance_place(x, y, obj_coin);
    if(coin_item != noone) {
        if(abs(coin_item.x - x) &lt; 40 &amp;&amp; abs(coin_item.y - y) &lt; 40) {
            obj_player_stats.points += coin_item.point_val;
            with (coin_item) instance_destroy();
        }
    }
    
    //go to next level
    door = instance_place(x, y, obj_door);
    if(door != noone &amp;&amp; room_exists(door.room_to)) {
        playable = false;
        obj_player_stats.door = door.room_to;
        alarm[2] = room_speed;
    }
    
    if(Z &amp;&amp; !attacking) {
        attacking = true;
        if(direct == 0 &amp;&amp; sprite_index) {
            sprite_index = sp_player_attacking_right;
        } else if(direct == 1) {
            sprite_index = sp_player_attacking_up;
        } else if(direct == 2) {
            sprite_index = sp_player_attacking_left;
        } else if(direct == 3) {
            sprite_index = sp_player_attacking_down;
        }
        image_speed = .18;
        alarm[0] = 18;
    }
    
    if(attacking &amp;&amp; image_index &gt;= 1 &amp;&amp; !attacked) {
        var attack_x = lengthdir_x(32, direct*90) + x;
        var attack_y = lengthdir_y(32, direct*90) + y;
        damage_obj = instance_create(attack_x, attack_y, obj_enemy_damage);
        damage_obj.damage = obj_player_stats.damage;
        damage_obj = instance_create(x, y, obj_enemy_damage);
        damage_obj.damage = obj_player_stats.damage;
        attacked = true;
    }
    
    depth = -y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player_damage">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_player_stats.player_health -= other.damage;
with (other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
