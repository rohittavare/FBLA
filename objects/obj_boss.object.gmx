<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_boss_standing_down</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the zombie

//start pathfinding
path = path_add();
seen_player = false;
alarm[0] = room_speed*2;

//variables to control zombie movement
starting_x = x;
ending_x = x;
starting_y = y;
ending_y = y;
direct = 3;
//is the zombie dead?
dead = false;

//attacking and defense variables
damage = 10;
zombie_health = 50;
//used later (attacking mid-animation)
attacked = false;

display_set_gui_size(940, 540);

attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy path variables
if(path_exists(path)) {
    path_delete(path);
}
with(obj_player_stats) room_goto(rm_win);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rumble the screen
obj_view.x+=10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rumble the screen
obj_view.x-=10;
alarm[9] = room_speed/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rumble the screen
obj_view.x+=10;
alarm[8] = room_speed/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rumble the screen
obj_view.x-=10;
alarm[7] = room_speed/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rumble the screen
obj_view.x+=10;
alarm[6] = room_speed/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rumble the screen
obj_view.x-=10;
alarm[4] = room_speed/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy instance after some time
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///zombie dies
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy Pathfinding
if(!dead &amp;&amp; !attacking) {
//follow player
        get_boss_to_player();
}

//next path check in .25 secs
alarm[0] = room_speed/4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update sprite based on movement
ending_x = x;
ending_y = y;

//move if the zombie is alive. zombies don't move once destroyed do they?
if(!dead) {
    
    //determine the x and y displacement by pathfinding
    if(ending_x &gt; starting_x) {
        direct = 0;
    } else if (ending_x &lt; starting_x) {
        direct = 2;
    } else if (ending_y &gt; starting_y) {
        direct = 3;
    } else if (ending_y &lt; starting_y) {
        direct = 1;
    }
    
    if(!attacking) {
        //get the right sprite for the job (attacking)
        if(point_distance(x, y, obj_player.x, obj_player.y) &lt;= 60 &amp;&amp; !attacking) {
            if(direct == 0 &amp;&amp; sprite_index != sp_boss_attacking_right) {
                sprite_index = sp_boss_attacking_right;
                image_speed = .033;
            }
            if(direct == 1 &amp;&amp; sprite_index != sp_boss_attacking_up) {
                sprite_index = sp_boss_attacking_up;
                image_speed = .033;
            }
            if(direct == 2 &amp;&amp; sprite_index != sp_boss_attacking_left) {
                sprite_index = sp_boss_attacking_left;
                image_speed = .033;
            }
            if(direct == 3 &amp;&amp; sprite_index != sp_boss_attacking_down) {
                sprite_index = sp_boss_attacking_down;
                image_speed = .033;
            }
            attacking = true;
            path_end();
        } else if(ending_x != starting_x) {
            //get the right sprite for the job (walking)
            if(ending_x &gt; starting_x &amp;&amp; sprite_index != sp_boss_walking_right) {
                sprite_index = sp_boss_walking_right;
                direct = 0;
                image_speed = 0.083;
            } else if (ending_x &lt; starting_x &amp;&amp; sprite_index != sp_boss_walking_left) {
                sprite_index = sp_boss_walking_left;
                direct = 2;
                image_speed = 0.083;
            }
        } else if (ending_y != starting_y) {
            if(ending_y &lt; starting_y &amp;&amp; sprite_index != sp_boss_walking_up ) {
                sprite_index = sp_boss_walking_up;
                direct = 1;
                image_speed = 0.083;
            } else if (ending_y &gt; starting_y &amp;&amp; sprite_index != sp_boss_walking_down ) {
                sprite_index = sp_boss_walking_down;
                direct = 3;
                image_speed = 0.083;
            }
            
        } else {
        // or the zombie can choose to stand. no problems with that.
            if(direct == 0 &amp;&amp; sprite_index != sp_boss_standing_right) {
                sprite_index = sp_boss_walking_right;
            }
            if(direct == 1 &amp;&amp; sprite_index != sp_boss_standing_up) {
                sprite_index = sp_boss_standing_up;
            }
            if(direct == 2 &amp;&amp; sprite_index != sp_boss_standing_left) {
                sprite_index = sp_boss_standing_left;
            }
            if(direct == 3 &amp;&amp; sprite_index != sp_boss_standing_down) {
                sprite_index = sp_boss_standing_down;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check current location
starting_x = x;
starting_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement control
depth = -y;
if(!dead) {
    
    //check to see if the zombie is touching a damage counter
    damage_counter = instance_place(x, y, obj_enemy_damage);
    if(damage_counter != noone) {
        if(abs(damage_counter.x - x) &lt; 40 &amp;&amp; abs(damage_counter.y - y) &lt; 40) {
            //reduce health and destroy counter after use
            zombie_health -= damage_counter.damage;
            with (damage_counter) instance_destroy();
            audio_play_sound(snd_hit, 10, false);
            if(zombie_health &lt;= 0) {
            //award points is dead and start dying animation
                obj_player_stats.points += 2000;
                dead = true;
                x = (x div CELL_WIDTH)*CELL_WIDTH;
                y = (y div CELL_HEIGHT)*CELL_HEIGHT;
                sprite_index = sp_boss_dying;
                image_speed = 0.033;
                obj_player.playable = false;
                path_end();
            }
        }
    }
    
    //if the zombie is in full attack, create a damage counter in front
    if(sprite_index == sp_boss_attacking_up || sprite_index == sp_boss_attacking_down || 
        sprite_index == sp_boss_attacking_right || sprite_index == sp_boss_attacking_left) {
            if(image_index &gt;= 3 &amp;&amp; attacked == false) {
                //place the counter and edit the damage
                /*damage_obj = instance_create(x, y, obj_player_damage);
                damage_obj.damage = damage;
                damage_obj.sprite_index = sp_blank_128;*/
                alarm[3] = 2;
                attacked = true;
                if(point_distance(x, y, obj_player.x, obj_player.y) &lt;= 70) {
                    obj_player_stats.player_health -= 10;
                }
            } else if(image_index &lt;= 2 &amp;&amp; attacked == true) {
                //finish the attack
                attacked = false;
                attacking = false;
            }
    }
}

// is the zombie dead? if so then destory.
if(dead &amp;&amp; image_index &gt;= 2) {
    tile_add(bg_boss, 0, 0, 64, 64, x - 32, y - 56, 1);
    sprite_index = sp_blank;
    alarm[2] = room_speed * 2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy path variables
if(path_exists(path)) {
    path_delete(path);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw boss health
h = zombie_health * 2;
draw_sprite(sp_stamina_bar, 0, 116, 519);
draw_healthbar(120, 520, 900, 530, h, c_black, c_red, c_red, 0, false, false);
draw_sprite(sp_stamina_bar, 1, 116, 519);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
