<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//An array is used to allow for modularity and scalabilty
//The array lists all possible menu items.
menu[0] = "Start Game";
menu[1] = "Quit Game";
audio_play_sound(snd_boss, 5, true);

//Space between each menu item
space = 64;
//The current position of the menu index
mPos = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movePos is the current key used and moves the 
//arrow in that direction
movePos = 0;
movePos -= max(keyboard_check_pressed(vk_up), 0);
movePos += max(keyboard_check_pressed(vk_down), 0);

//This if statement handles edge checking to make sure
//there are no errors and can be scaled to larger number
//of menus
if(movePos != 0){
    mPos += move;
    if(mPos &lt; 0){
        mPos = array_length_1d(menu) - 1;
    }else if(mPos &gt; array_length_1d(menu) - 1){
        mPos = 0;
    }
}

//This outlines the selection of that perticular menu item.
var push;
push = max(keyboard_check_pressed(ord("Z")), 0);

if(push = 1){
    scr_menu();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This portion sets the necessary guidelines for
//drawing the text on screen for the menu items
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(ft_press_start_2P);
draw_set_color(c_white);

//A for loop goes through the array, inturn allowing to add
//more menu items if needed. All the spacing is handled in 
//this loop
for(var m = 0; m &lt; array_length_1d(menu); m+=1){

    draw_text(x + space, y + (m * space), string(menu[m]));

}

//Finally the current arrow sprite is drawn next to the selected
//menu item
draw_sprite(sprite_index, 0, x + 16, y + mPos * space);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
