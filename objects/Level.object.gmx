<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create level
//Resize the room
room_width = (CELL_WIDTH/16) * 720;
room_height = (CELL_HEIGHT/16) * 720;

//set grid dimentions
grid_width = room_width div CELL_WIDTH;
grid_height = room_height div CELL_HEIGHT;

//starting and ending location variables
start_x = 0;
start_y = 0;
exit_x = 0;
exit_y = 0;

//Create grid
grid = ds_grid_create(grid_width, grid_height);

//Create enemy pathfinding
enemy_grid = mp_grid_create(0, 0, grid_width, grid_height, CELL_WIDTH, CELL_HEIGHT);

//Set grid to VOID
ds_grid_set_region(grid, 0, 0, grid_width - 1, grid_height - 1, VOID);

//Set level
level = 1;

//------------------------------- the following section is level building. this process was outsorced to a script -----------
//Create random seed
/*randomize();

//creating the starting point of the level
var start_x = irandom(grid_width - 3) + 1;
var start_y = 0;

//Creating tilesetter to start of level
var tiler_x = start_x;
var tiler_y = start_y + 1;

//Create player at center
instance_create(start_x*CELL_WIDTH + CELL_WIDTH/2, start_y*CELL_HEIGHT + CELL_HEIGHT/2, obj_player);

//Randomizing direction of tilesetter
var tiler_dir = irandom(3);

//Probility of changin direction (n = 1 gives .5)
var prob_turn = 1;

//Probability of an enemy spawn
var prob_enemy = 30;


//create a random path to the bottom of the level.
while(tiler_y &lt; grid_height - 1) {
     //Set current tile to FLOOR
    grid[# tiler_x, tiler_y] = FLOOR;
    
    //Move tilesetter in current direction
    tiler_x += lengthdir_x(1, tiler_dir*90);
    tiler_y += lengthdir_y(1, tiler_dir*90);
    
    //Ensure tilesetter leaves a one-unit border
    tiler_x = clamp(tiler_x, 1, grid_width - 2);
    tiler_y = clamp(tiler_y, 1, grid_height - 1);
    
    //Randomly turn the tilesetter
    if (irandom(prob_turn) == prob_turn) {
        tiler_dir = irandom(3);
    }
    
    if(irandom(prob_enemy) = prob_enemy) {
        instance_create(tiler_x*CELL_WIDTH + CELL_WIDTH/2, tiler_y*CELL_HEIGHT + CELL_HEIGHT/2, obj_zombie);
    }
}

//marking the exit
grid[# tiler_x, tiler_y] = EXIT;
grid[# start_x, start_y] = ENTRANCE;

//marking exit location
var exit_x = tiler_x;
var exit_y = tiler_y;

//sending tiler back to start
tiler_x = start_x;
tiler_y = start_y;*/

//Create level by simulating 1000 random steps
/*repeat(1000) {
    //Set current tile to FLOOR
    grid[# tiler_x, tiler_y] = FLOOR;
    
    //Move tilesetter in current direction
    tiler_x += lengthdir_x(1, tiler_dir*90);
    tiler_y += lengthdir_y(1, tiler_dir*90);
    
    //Ensure tilesetter leaves a one-unit border
    tiler_x = clamp(tiler_x, 1, grid_width - 2);
    tiler_y = clamp(tiler_y, 1, grid_height - 2);
    
    //Randomly turn the tilesetter
    if (irandom(prob_turn) == prob_turn) {
        tiler_dir = irandom(3);
    }
}*/

//Mark all void cells neighboring a floor cell as WALL
/*for(var grid_y = 1; grid_y &lt; grid_height - 1; grid_y++) {
    for(var grid_x = 1; grid_x &lt; grid_width - 1; grid_x++) {
        if(grid[# grid_x, grid_y] == FLOOR) {
            if(grid[# grid_x + 1, grid_y] == VOID) grid[# grid_x + 1, grid_y] = WALL;
            if(grid[# grid_x - 1, grid_y] == VOID) grid[# grid_x - 1, grid_y] = WALL;
            if(grid[# grid_x, grid_y + 1] == VOID) grid[# grid_x, grid_y + 1] = WALL;
            if(grid[# grid_x, grid_y - 1] == VOID) grid[# grid_x, grid_y - 1] = WALL;
        }
    }
}

//Drawing tiles to screen
for(var grid_y = 0; grid_y &lt; grid_height; grid_y++) {
    for(var grid_x = 0; grid_x &lt; grid_width; grid_x++) {
        if(grid[# grid_x, grid_y] == FLOOR) {
            //Draw floor
            tile_add(bg_grass, 0, 0, CELL_WIDTH, CELL_HEIGHT, grid_x*CELL_WIDTH, grid_y*CELL_HEIGHT, 1);
        }
        if(grid[# grid_x, grid_y] == WALL) {
            //Identify wall in enemy pathfinding
            mp_grid_add_cell(enemy_grid, grid_x, grid_y);
            //Draw walls
            tile_add(bg_grass, 0, 0, CELL_WIDTH, CELL_HEIGHT, grid_x*CELL_WIDTH, grid_y*CELL_HEIGHT, 1);*/
            /*tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 36, grid_y*CELL_HEIGHT - 70, (grid_y*CELL_HEIGHT + 17)*-1);
            tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 4, grid_y*CELL_HEIGHT - 70, (grid_y*CELL_HEIGHT + 17)*-1);
            tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 36, grid_y*CELL_HEIGHT - 38, (grid_y*CELL_HEIGHT + 49)*-1);
            tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 4, grid_y*CELL_HEIGHT - 38, (grid_y*CELL_HEIGHT + 49)*-1);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 36, grid_y*CELL_HEIGHT - 70, 0);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 4, grid_y*CELL_HEIGHT - 70, 0);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 36, grid_y*CELL_HEIGHT - 38, 0);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 4, grid_y*CELL_HEIGHT - 38, 0);*/
            //Drawing a tree and its shadow
            /*tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 20, grid_y*CELL_HEIGHT - 54, (grid_y*CELL_HEIGHT + 33)*-1);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 20, grid_y*CELL_HEIGHT - 54, 0);
        }
        if(grid[# grid_x, grid_y] == VOID) {
            //Identify voids in enemy pathfinding
            mp_grid_add_cell(enemy_grid, grid_x, grid_y);
            //Draw voids
            //Drawing a cluster of trees to represent a thick forest
            tile_add(bg_grass, 0, 0, CELL_WIDTH, CELL_HEIGHT, grid_x*CELL_WIDTH, grid_y*CELL_HEIGHT, 1);
            tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 36, grid_y*CELL_HEIGHT - 70, (grid_y*CELL_HEIGHT + 17)*-1);
            tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 4, grid_y*CELL_HEIGHT - 70, (grid_y*CELL_HEIGHT + 17)*-1);
            tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 36, grid_y*CELL_HEIGHT - 38, (grid_y*CELL_HEIGHT + 49)*-1);
            tile_add(bg_tree, 0, 0, 108, 108, grid_x*CELL_WIDTH - 4, grid_y*CELL_HEIGHT - 38, (grid_y*CELL_HEIGHT + 49)*-1);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 36, grid_y*CELL_HEIGHT - 70, 0);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 4, grid_y*CELL_HEIGHT - 70, 0);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 36, grid_y*CELL_HEIGHT - 38, 0);
            tile_add(bg_tree_shadow, 0, 0, 108, 108, grid_x*CELL_WIDTH - 4, grid_y*CELL_HEIGHT - 38, 0);
           
        }
        if(grid[# grid_x, grid_y] == EXIT || grid[# grid_x, grid_y] == ENTRANCE) {
            tile_add(bg_broken_tiles, 0, 0, CELL_WIDTH, CELL_HEIGHT, grid_x*CELL_WIDTH, grid_y*CELL_HEIGHT, 1);
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy grid variables
if(level == 1) {
    audio_stop_sound(snd_forest);
} else if(level == 2) {
    audio_stop_sound(snd_mountain);
} else if(level == 3) {
    audio_stop_sound(snd_lab);
} else if(level == 4) {
    audio_stop_sound(snd_boss);
}
ds_grid_destroy(grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
